#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, fp1, w1, w2, w3, w4, wspare;
static-var  mheading, restore_delay, regview, regspeed;


#ifndef MAX_SPEED
#define MAX_SPEED 75 
#endif

#ifndef LOS_RADIUS
#define LOS_RADIUS 85
#endif

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			4

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

turncheck()
{
	
	while( TRUE )
	{
		mheading = get 82;
		if( mheading < <-45> ) // 8910 = 45 degrees times the angular constant of 182, so you don't need the <>'s
		{
			mheading = <-45>;
			turn w1 to y-axis <-30> speed <150.000000>;
			turn w2 to y-axis <-30> speed <150.000000>;
		}
		
		if( mheading > <45> )
		{
			mheading = <45>;
			turn w1 to y-axis <30> speed <150.000000>;
			turn w2 to y-axis <30> speed <150.000000>;
		}
		
		if( mheading > <-45> AND mheading < <45> )
		{
			turn w1 to y-axis <0> speed <150.000000>;
			turn w2 to y-axis <0> speed <150.000000>;
		}		
	sleep 1000;	//check every second
	}

}

StartMoving()
{

	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	spin w1 around x-axis speed <400.159341> accelerate <160.00000>;
	spin w2 around x-axis speed <400.159341> accelerate <160.00000>;
	spin w3 around x-axis speed <400.159341> accelerate <160.00000>;
	spin w4 around x-axis speed <400.159341> accelerate <160.00000>;
	start-script turncheck();
}

StopMoving()
{
	signal SIG_MOVE;
	spin w1 around x-axis speed <0> accelerate <-140.00000>;
	spin w2 around x-axis speed <0> accelerate <-140.00000>;
	spin w3 around x-axis speed <0> accelerate <-140.00000>;
	spin w4 around x-axis speed <0> accelerate <-140.00000>;
	turn w1 to y-axis <0> speed <150.000000>;
	turn w2 to y-axis <0> speed <150.000000>;
}

undeploy()
{
	sleep 2000;	
	set MAX_SPEED to regspeed;
	set LOS_RADIUS to regview;
}

deploy()
{
	set MAX_SPEED to 1;
	sleep 2000;
	set LOS_RADIUS to (regview * 2);
}

Toggle(t,value) 
{

if(t==1)
	{
if(value==1)
{
call-script deploy();
}

if(value==0)
{
call-script undeploy();	
}
	}

}

Create()
{
	regspeed = get MAX_SPEED;
	regview = get LOS_RADIUS;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;	
	set-signal-mask 0;
	turn w1 to y-axis <0.000000> speed <100.000000>;
	turn w2 to y-axis <0.000000> speed <100.000000>;
	turn turret to y-axis <0> speed <100.071429>;
	turn turret to x-axis <0> speed <100.071429>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	start-script restoreafterdelay();
	turn turret to y-axis heading speed <100.071429>;
	turn turret to x-axis 0 - pitch speed <100.071429>;
	wait-for-turn turret around x-axis;
	wait-for-turn turret around y-axis;
	return (1);
}

FirePrimary()
{
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = fp1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 99 )
	{
		corpsetype = 1;
		explode w1 type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode w2 type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	corpsetype = 3;
		explode w1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode w2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
}
