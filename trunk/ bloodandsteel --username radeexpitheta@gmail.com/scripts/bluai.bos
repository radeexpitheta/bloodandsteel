#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, link, ramp, gen1, gen2, gun, barrel, fp1, under1, under2, under3;

static-var  speed, statechg_DesiredState, statechg_StateChanging, restore_delay, Static_Var_5, maxs, attacking;

// Signal definitions
#define SIG_AIM				2

#ifndef CURRENT_SPEED
#define CURRENT_SPEED 29 
#endif

#ifndef MAX_SPEED
#define MAX_SPEED 75 
#endif

activatescr()
{
	if( TRUE )
	{
	turn under1 to y-axis <0> now;
	turn under2 to z-axis <0> now;
	turn under3 to z-axis <0> now;
	show under1;
	show under2;
	show under3;
	turn under1 to x-axis <90> speed <150.000000>;
	turn under2 to z-axis <-90> speed <150.000000>;
	turn under3 to z-axis <90> speed <150.000000>;
	sleep 1000;
	hide under1;
	hide under2;
	hide under3;
	}
	sleep 2;
	return (0);
}

deactivatescr()
{
	if( TRUE )
	{
	turn under1 to x-axis <90> speed <150.000000>;
	turn under2 to z-axis <-90> speed <150.000000>;
	turn under3 to z-axis <90> speed <150.000000>;
	show under1;
	show under2;
	show under3;
	turn under1 to y-axis <0> now;
	turn under2 to z-axis <0> now;
	turn under3 to z-axis <0> now;
	}
	sleep 66;
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 2 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from base;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from gen1;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MoveRater()
{

	while (TRUE)
		{
		speed = get CURRENT_SPEED; 
		if (speed < (maxs / 1.6) )
			{
		turn gen1 to x-axis <0.000000> speed <197.802198>;
		turn gen2 to x-axis <0.000000> speed <197.802198>;
			}
		if (attacking == 0)
			{
			if (speed > (maxs / 1.6 ) )
				{
			turn gen1 to x-axis <45.000000> speed <197.802198>;
			turn gen2 to x-axis <45.000000> speed <197.802198>;
				}
			}	
		sleep 500;
		}
	
}

Create()
{
	hide fp1;
	attacking = 0;
	Static_Var_5 = 0;
	restore_delay = 3000;
	maxs = get MAX_SPEED;
	call-script InitState();
	start-script SmokeUnit();
	start-script MoveRater();
}


SweetSpot(piecenum)
{
	piecenum = base;
}

QueryTransport(Func_Var_1)
{
	Func_Var_1 = 1;
}

Activate()
{
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	return (0);
}

BeginTransport(Func_Var_1)
{
	move link to y-axis [0.000000] - Func_Var_1 now;
	turn gen1 to x-axis <0.000000> speed <197.802198>;
	turn gen2 to x-axis <0.000000> speed <197.802198>;
	Static_Var_5 = 1;
	wait-for-turn gen1 around x-axis;
}

EndTransport()
{
	turn gen1 to x-axis <0.010989> speed <197.802198>;
	turn gen2 to x-axis <0.010989> speed <197.802198>;
	Static_Var_5 = 0;
	wait-for-turn gen1 around x-axis;
}



StopMoving()
{
	turn gen1 to x-axis <0> speed <197.802198>;
	turn gen2 to x-axis <0> speed <197.802198>;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 + Func_Var_1;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	signal 16;
	set-signal-mask 16;
	attacking = 0;
	spin barrel around z-axis speed <0>;
	turn gun to y-axis <0.000000> speed <197.802198>;
	turn gun to x-axis <0.000000> speed <197.802198>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	attacking = 1;
	start-script RestoreAfterDelay();
	turn gen1 to x-axis <0.000000> speed <197.802198>;
	turn gen2 to x-axis <0.000000> speed <197.802198>;
	spin barrel around z-axis speed <300>;
	turn gun to y-axis heading speed <197.802198>;
	turn gun to x-axis 0 - pitch speed <197.802198>;
	wait-for-turn gun around y-axis;
	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = gun;
}

QueryPrimary(piecenum)
{
	piecenum = fp1;
}

FirePrimary()
{
emit-sfx 1024+0 from fp1;
sleep 100;
emit-sfx 1024+0 from fp1;
sleep 100;
emit-sfx 1024+0 from fp1;
sleep 100;
emit-sfx 1024+0 from fp1;
sleep 100;
emit-sfx 1024+0 from fp1;
}


Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode gen1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode gen2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode gun type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode barrel type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode base type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode gen1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode gen2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode gun type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode barrel type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode base type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode gen1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode gen2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode gun type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode barrel type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode base type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode gen1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode gen2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode gun type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode barrel type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode base type SHATTER | EXPLODE_ON_HIT | BITMAP4;
}
