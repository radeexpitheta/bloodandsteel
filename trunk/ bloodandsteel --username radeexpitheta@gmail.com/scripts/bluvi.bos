#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, w1, w2, w3, w4, w5, w6, sleeves, bar1, bar2, fp1, 
fp2, lsho, larm, usho, uarm, wake1, wake2;
static-var  inwater, smode, mheading, restore_delay, gun1;

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			4

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

turncheck()
{
	
	while( TRUE )
	{
		mheading = get 82;
		if( mheading < -8190 ) // 8910 = 45 degrees times the angular constant of 182, so you don't need the <>'s
		{
			mheading = -8190;
			turn w1 to y-axis <-30> speed <150.000000>;
			turn w2 to y-axis <-30> speed <150.000000>;
		}
		
		if( mheading > 8190 )
		{
			mheading = 8190;
			turn w1 to y-axis <30> speed <150.000000>;
			turn w2 to y-axis <30> speed <150.000000>;
		}
		
		if( mheading > -8190 AND mheading < 8190 )
		{
			turn w1 to y-axis <0> speed <150.000000>;
			turn w2 to y-axis <0> speed <150.000000>;
		}		
	sleep 1000;	//check every second
	}

}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
		spin w1 around x-axis speed <400.159341> accelerate <160.00000>;
		spin w2 around x-axis speed <400.159341> accelerate <160.00000>;
		spin w3 around x-axis speed <400.159341> accelerate <160.00000>;
		spin w4 around x-axis speed <400.159341> accelerate <160.00000>;
		spin w5 around x-axis speed <400.159341> accelerate <160.00000>;
		spin w6 around x-axis speed <400.159341> accelerate <160.00000>;
		start-script turncheck();
}

StopMoving()
{
	signal SIG_MOVE;
	spin w1 around x-axis speed <0> accelerate <-140.00000>;
	spin w2 around x-axis speed <0> accelerate <-140.00000>;
	spin w3 around x-axis speed <0> accelerate <-140.00000>;
	spin w4 around x-axis speed <0> accelerate <-140.00000>;
	spin w5 around x-axis speed <0> accelerate <-140.00000>;
	spin w6 around x-axis speed <0> accelerate <-140.00000>;
	turn w1 to y-axis <0> speed <150.000000>;
	turn w2 to y-axis <0> speed <150.000000>;
}

static-var units_inside;// Make sure you initialise it to 0 in the Create()

#define MAX_LOAD_RADIUS [40]
#define MAX_UNLOAD_RADIUS [40]
#define LOAD_TIME 25
#define UNLOAD_TIME 15

TransportPickup(id)
	{
	
	//Abort if already filled up
	if(units_inside>=3)
		{
		return;
		}
	
	// If close enough to allow loading:
	if(get XZ_HYPOT(get PIECE_XZ(base) - get UNIT_XZ(id))<=MAX_LOAD_RADIUS)
		{
		
		// we're busy loading, don't disturb:
		set BUSY to 1;
		
		// instantly move the magical invisible arm to the position where the unit to load is
		turn lsho to y-axis get XZ_ATAN(get PIECE_XZ(lsho) - get UNIT_XZ(id)) now;
		move larm to z-axis get XZ_HYPOT(get PIECE_XZ(lsho) - get UNIT_XZ(id)) now;
		move larm to y-axis get UNIT_Y(id) - get PIECE_Y(lsho) now;
		
		attach-unit id to larm;
		
		//slowly move the arm, carrying the unit, to the spider center (moving to proper basket pos would be too complex for now)
		move larm to z-axis 0 speed ((get XZ_HYPOT(get PIECE_XZ(lsho) - get UNIT_XZ(id)))/(LOAD_TIME))*1000;
		move larm to y-axis get PIECE_Y(base) - get PIECE_Y(lsho) speed ((get PIECE_Y(base) - get UNIT_Y(id))/(LOAD_TIME))*1000;// I assumed the torax would have a higher Y than the loaded unit, if not the speed would be negative and that would be BAD!
		sleep LOAD_TIME;
		
		// Ideally here I would check that the loading was successful. Bah, let's not to simplify.
		
		// Let's not forget to update the counter
		++units_inside;	
		attach-unit id to 0 - 1;
		set BUSY to 0;
		
		}
	
	}


TransportDrop(id,xz)
	{
	// If close enough to allow unloading:
	if(get XZ_HYPOT(get PIECE_XZ(base) - get UNIT_XZ(id))<=MAX_UNLOAD_RADIUS)
		{
		
		// we're busy unloading, don't disturb:
		set BUSY to 1;
		
		// instantly reset the position of the magical invisible arm (and turn it already, ok)
		turn usho to y-axis get XZ_ATAN(get PIECE_XZ(usho) - xz) now;
		move uarm to z-axis 0 now;
		move uarm to y-axis get PIECE_Y(base) - get PIECE_Y(usho) now;
		
		attach-unit id to uarm;
		
		//slowly move the arm, carrying the unit, to the pos where to unload
		move uarm to z-axis get XZ_HYPOT(get PIECE_XZ(usho) - xz) speed ((get XZ_HYPOT(get PIECE_XZ(usho) - xz))/(UNLOAD_TIME))*1000;
		move uarm to y-axis get GROUND_HEIGHT(xz) - get PIECE_Y(usho) speed ((get PIECE_Y(base) - get GROUND_HEIGHT(xz))/(UNLOAD_TIME))*1000;//again, I assumed that torax was above ground, if not, speed would be negative, and things could go BAD!!
		sleep UNLOAD_TIME;
		
		// Ideally here I would check that the unloading was successful. Bah, let's not to simplify.
		
		// Let's not forget to update the counter
		--units_inside;
		
		// And now, ladies and gentlemen, the drop command:
		drop-unit id;
		
		// Ok, we're done, the engine may proceed to next action. (Or something like that, I'm not even sure that "BUSY" really do something.)
		set BUSY to 0;
		
		}
	
	}
	
Create()
{
	units_inside = 0;
	smode = 0;
	gun1 = 0;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;	
	set-signal-mask 0;
	turn w1 to y-axis <0.000000> speed <100.000000>;
	turn w2 to y-axis <0.000000> speed <100.000000>;
	turn turret to y-axis <0> speed <100.071429>;
	turn sleeves to x-axis <0> speed <100.071429>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	start-script restoreafterdelay();
	turn turret to y-axis heading speed <100.071429>;
	turn sleeves to x-axis 0 - pitch speed <100.071429>;
	wait-for-turn sleeves around x-axis;
	wait-for-turn turret around y-axis;
	return (1);
}

Shot1()
{
if (gun1 == 1)
	{
	emit-sfx 1024+0 from fp1;
	emit-sfx 1024+1 from bar1;
	}
if (gun1 == 0)
	{
	emit-sfx 1024+0 from fp2;
	emit-sfx 1024+1 from bar2;
	}
gun1 = 1 - gun1;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
if (gun1 == 0)
	{
	piecenum = fp1;
	}
if (gun1 == 1)
	{
	piecenum = fp2;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide fp1;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode sleeves type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode fp1 type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode sleeves type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode fp1 type FALL | BITMAP3;
		explode turret type FALL | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode sleeves type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode fp1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode sleeves type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode fp1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
}
