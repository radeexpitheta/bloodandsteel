#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, gen1, gen2, gen3, gun, fp1, under, rack1, rack2, m1, m2;

static-var  speed, statechg_DesiredState, statechg_StateChanging, attacking, gun1, restore_delay, aimer, maxs;

#ifndef CURRENT_SPEED
#define CURRENT_SPEED 29 
#endif

#ifndef MAX_SPEED
#define MAX_SPEED 75 
#endif

activatescr()
{
	if( TRUE )
	{
	turn under to x-axis <0> now;
	turn under to x-axis <45> speed <150.000000>;
	turn gen1 to x-axis <0.000000> speed <197.802198>;
	turn gen2 to x-axis <0.000000> speed <197.802198>;
	}
	sleep 2;
	return (0);
}

deactivatescr()
{
	if( TRUE )
	{
	turn under to x-axis <45> speed <150.000000>;
	turn under to x-axis <0> now;
	turn gen1 to x-axis <0.000000> speed <197.802198>;
	turn gen2 to x-axis <0.000000> speed <197.802198>;
	}
	sleep 66;
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 2 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from base;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from gen1;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Toggle(t,value) 
{

if(t==1)
	{
if(value==0)
{
sleep 2000;
aimer = 1;
}

if(value==1)
{
sleep 2000;
aimer = 2;
}
	}

}

MoveRater()
{
	while (TRUE)
		{
		speed = get CURRENT_SPEED; 
	if (speed < (maxs / 1.6) )
			{
		turn gen1 to x-axis <0.000000> speed <197.802198>;
		turn gen2 to x-axis <0.000000> speed <197.802198>;
			}
		if (attacking == 0)
			{
			if (speed > (maxs / 1.6 ) )
				{
			turn gen1 to x-axis <45.000000> speed <197.802198>;
			turn gen2 to x-axis <45.000000> speed <197.802198>;
				}
			}	
		sleep 500;
		}
}

Create()
{
	aimer = 1;
	attacking = 0;
	gun1 = 1;
	maxs = get MAX_SPEED;
	restore_delay = 3000;
	call-script InitState();
	start-script SmokeUnit();
	start-script MoveRater();	
}


SweetSpot(piecenum)
{
	piecenum = base;
}


Activate()
{
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	return (0);
}


StopMoving()
{
	turn gen1 to x-axis <0> speed <197.802198>;
	turn gen2 to x-axis <0> speed <197.802198>;
	turn gen3 to x-axis <0> speed <197.802198>;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 + Func_Var_1;
}

RestoreAfterDelay()
{
	signal 16;
	set-signal-mask 16;
	sleep restore_delay;
	attacking = 0;
	turn base to x-axis <0.000000> speed <197.802198>;
	turn gun to y-axis <0.000000> speed <197.802198>;
	turn gun to x-axis <0.000000> speed <197.802198>;
}

AimWeapon1(heading, pitch)
{
if (aimer == 1)
{
	attacking = 1;
	start-script RestoreAfterDelay();
	turn base to x-axis <15.000000> speed <197.802198>;
	turn gen1 to x-axis <0.000000> speed <197.802198>;
	turn gen2 to x-axis <0.000000> speed <197.802198>;
	turn gun to y-axis heading speed <197.802198>;
	turn gun to x-axis 0 - pitch speed <197.802198>;
	wait-for-turn gun around y-axis;
	return (1);
	}
}

AimFromWeapon1(piecenum)
{
	piecenum = gun;
}

QueryWeapon1(piecenum)
{
	piecenum = fp1;
}

FireWeapon1()
{
emit-sfx 1024+0 from fp1;
emit-sfx 1024+1 from gun;
sleep 100;
emit-sfx 1024+0 from fp1;
emit-sfx 1024+1 from gun;
sleep 100;
emit-sfx 1024+0 from fp1;
emit-sfx 1024+1 from gun;
sleep 100;
emit-sfx 1024+0 from fp1;
emit-sfx 1024+1 from gun;
}
//------------------------

AimWeapon2(heading, pitch)
{
if (aimer == 2)
{
	attacking = 1;
	start-script RestoreAfterDelay();
	turn base to x-axis <15.000000> speed <197.802198>;
	turn gen1 to x-axis <0.000000> speed <197.802198>;
	turn gen2 to x-axis <0.000000> speed <197.802198>;
	return (1);
	}
}

AimFromWeapon2(piecenum)
{
	piecenum = base;
}

QueryWeapon2(piecenum)
{
if (gun1 == 1)
{
	piecenum = m1;
}
else 
{
	piecenum = m2;
}
return (0);
}

Shot2()
{
gun1 = !gun1;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode gen1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode gen2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode gun type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode rack1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode base type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode gen1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode gen2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode gun type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode rack1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode base type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode gen1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode gen2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode gun type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode rack1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode base type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode gen1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode gen2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode gun type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode rack1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode base type SHATTER | EXPLODE_ON_HIT | BITMAP4;
}
