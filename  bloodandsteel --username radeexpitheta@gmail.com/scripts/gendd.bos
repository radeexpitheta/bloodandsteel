#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, m1, sleeve, turret;
static-var  aimer, restore_delay, miz;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM2			4	

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

deploy() //normal
{
	aimer = 0;
	turn turret to y-axis <0> speed <100.071429>;
	turn sleeve to x-axis <0> speed <50.043956>;
	sleep 2000;	
	aimer = 1;
}

undeploy() //special
{
	aimer = 0;
	turn turret to y-axis <0> speed <100.071429>;
	turn sleeve to x-axis <-90> speed <50.043956>;
	sleep 2000;
	aimer = 2;
}

Toggle(t,value) 
{

if(t==1)
	{
if(value==0)
{
call-script deploy();
}

if(value==1)
{
call-script undeploy();	
}
	}

}

Create()
{
	aimer = 1;
	miz = 1;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 2000;	
	turn sleeve to x-axis <0> speed <50.043956>;
}

Reload1()
{
	sleep 60000;	
	show m1;
	miz = 1;
	
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	if (miz == 0)
	{
	start-script restoreafterdelay();
	sleep 800;
	}
	if (miz == 1 AND aimer == 1)
	{
	turn sleeve to x-axis <-90.000000> speed <50.043956>;
	wait-for-turn sleeve around x-axis;
	start-script restoreafterdelay();
	return (1);
	}
}

FirePrimary()
{
hide m1;
miz = 0;
start-script reload1();
return 0;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = m1;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;
	if (miz == 0)
	{
	start-script restoreafterdelay();
	sleep 800;
	}
	if (miz == 1 AND aimer == 2)
	{
	turn sleeve to x-axis <-90.000000> speed <50.043956>;
	wait-for-turn sleeve around x-axis;
	start-script restoreafterdelay();
	return (1);
	}
}

FireSecondary()
{
hide m1;
miz = 0;
start-script reload1();
}

AimFromSecondary(piecenum)
{
	piecenum = turret;
}

QuerySecondary(piecenum)
{
	piecenum = m1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode m1 type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode sleeve type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode m1 type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode sleeve type FALL | BITMAP3;
		explode turret type FALL | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode m1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode m1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
}
