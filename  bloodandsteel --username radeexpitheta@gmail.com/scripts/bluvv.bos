#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, fp1, tracks, turret, barrel;
static-var  aimer, restore_delay, regspeed;


#ifndef MAX_SPEED
#define MAX_SPEED 75 
#endif

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM2			4

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

undeploy()
{
	aimer = 0;
	move barrel to z-axis [0] speed [4];
	sleep 2000;	
	aimer = 1;
	set MAX_SPEED to regspeed;
}

deploy()
{
	aimer = 0;
	set MAX_SPEED to 1;
	move barrel to z-axis [3] speed [4];
	sleep 2000;
	aimer = 2;
}

Toggle(t,value) 
{

if(t==1)
	{
if(value==0)
{
call-script undeploy();
}

if(value==1)
{
call-script deploy();	
}
	}

}

Create()
{
	regspeed = get MAX_SPEED;
	aimer = 1;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;	
	turn turret to y-axis <0> speed <100.071429>;
}

AimWeapon1(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	start-script restoreafterdelay();
	if ( aimer == 1)
	{
	turn turret to y-axis heading speed <100.071429>;
	wait-for-turn turret around y-axis;
	return (1);
	}
}

FireWeapon1()
{
	if ( aimer == 1)
	{
	emit-sfx 1024+0 from fp1;
	return 0;
	}
}

AimFromWeapon1(piecenum)
{
	piecenum = turret;
}

QueryWeapon1(piecenum)
{
	piecenum = fp1;
}

//--------------

AimWeapon2(heading, pitch)
{
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;
	start-script restoreafterdelay();
	if ( aimer == 2)
	{
	turn turret to y-axis heading speed <200.071429>;
	wait-for-turn turret around y-axis;
	return (1);
	}
}

FireWeapon2()
{
	
	if (aimer == 2)
	{
	emit-sfx 1024+0 from fp1;
	move barrel to z-axis [1.50000] speed [200.000000];
	sleep 150;
	move barrel to z-axis [3.000000] speed [80.000000];
	return 0;
	}
}

AimFromWeapon2(piecenum)
{
	piecenum = turret;
}

QueryWeapon2(piecenum)
{
	piecenum = fp1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide fp1;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode fp1 type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode fp1 type FALL | BITMAP3;
		explode turret type FALL | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode fp1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode fp1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
}
