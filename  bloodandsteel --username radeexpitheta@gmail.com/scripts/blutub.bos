#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, w1, w2, box1, box2, load_shoulder, load_Arm, unload_shoulder, unload_Arm;
static-var  restore_delay, heading, ammo, building;

// Signal definitions
#define SIG_MOVE				2

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

turncheck()
{
	
	while( TRUE )
	{
		heading = get 82;
		if( heading < -8190 ) // 8910 = 45 degrees times the angular constant of 182, so you don't need the <>'s
		{
			heading = -8190;
			turn w1 to y-axis <-30> speed <150.000000>;
			turn w2 to y-axis <-30> speed <150.000000>;
		}
		
		if( heading > 8190 )
		{
			heading = 8190;
			turn w1 to y-axis <30> speed <150.000000>;
			turn w2 to y-axis <30> speed <150.000000>;
		}
		
		if( heading > -8190 AND heading < 8190 )
		{
			turn w1 to y-axis <0> speed <150.000000>;
			turn w2 to y-axis <0> speed <150.000000>;
		}		
	sleep 1000;	//check every second
	}	

}

checkstatus()
{
	while( TRUE )
	{
	//check suuplies	
		if (ammo < 50 ) 
		{ 
			hide box2;
		}
		if (ammo < 5 ) 
			{
			hide box1; 
			}
		if (ammo >= 50 ) 
			{
			show box1; 
			show box2;
			}
	sleep 800;	//check every second 
	}	
sleep 5;
}

StartMoving()
{

	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
//	spin wheel1a around x-axis speed <400.159341> accelerate <160.00000>;
//	spin wheel1b around x-axis speed <400.159341> accelerate <160.00000>;
//	spin wheel2a around x-axis speed <400.159341> accelerate <160.00000>;
//	spin wheel2b around x-axis speed <400.159341> accelerate <160.00000>;
	start-script turncheck();
}

StopMoving()
{
	signal SIG_MOVE;
	//spin wheel1a around x-axis speed <0> accelerate <-140.00000>;
	//spin wheel1b around x-axis speed <0> accelerate <-140.00000>;
	//spin wheel2a around x-axis speed <0> accelerate <-140.00000>;
	//spin wheel2b around x-axis speed <0> accelerate <-140.00000>;
	turn w1 to y-axis <0> speed <150.000000>;
	turn w2 to y-axis <0> speed <150.000000>;
}


Create()
{
	ammo = 100;
	restore_delay = 3000;
	start-script SmokeUnit();
	start-script checkstatus();
	return (0);
}

SetStock(newstock)// Only called when ammo is drawn, and no more than once per frame
{
	ammo = newstock;
	if (ammo < 1) {return 0;}
}

Refill(RefillerID,RefillerStock)// UnitID of the refiller, how many ammo left in the refiller stock
{
		var refilled;
		refilled = 0;
		if(RefillerStock>0 && ammo<50)
		{
			refilled = 1;
			++ammo;
		}
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 4;
	return (0);
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn w1 to y-axis <0.000000> speed <100.000000>;
	turn w2 to y-axis <0.000000> speed <100.000000>;
	return (0);
}

StartBuilding(Func_Var_1, Func_Var_2)
{
	if (ammo < 1) {return 0;}
	turn load_arm to y-axis Func_Var_1 now;
	turn load_arm to y-axis Func_Var_2 now;
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	set INBUILDSTANCE to 0;
}


QueryNanoPiece(piecenum)
{
	piecenum = load_arm;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 00 )
	{
		corpsetype = 1;
		explode body type BITMAPONLY | BITMAP1;
		explode w1 type BITMAPONLY | BITMAP1;
		explode w2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 249 )
	{
		corpsetype = 2;
		explode body type SHATTER | BITMAP4;
		explode w2 type SHATTER | BITMAP4;
		explode w1 type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 499 )
	{
		corpsetype = 3;
		explode body type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode w1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode w2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode body type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode w1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode w2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;

}
