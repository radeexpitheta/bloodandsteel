#include "sfxtype.h"
#include "exptype.h"

piece  base, wing1, wing2, wingtip1, wingtip2, m1, m2, tail1, tail2, gen1, gen2, thrust1, thrust2, fin1, fin2, under1, under2, under3;

static-var  bmoving, gun_1, gun2, statechg_DesiredState, statechg_StateChanging,  aimer, speed, fast, rando;

#ifndef CURRENT_SPEED
#define CURRENT_SPEED 29 
#endif


activatescr()
{
	if( TRUE )
	{
	turn under1 to x-axis <0> now;
	turn under2 to z-axis <0> now;
	turn under3 to z-axis <0> now;
	sleep 1;
	show under1;
	show under2;
	show under3;
	turn under1 to x-axis <120> speed <150.000000>;
	turn under2 to z-axis <80> speed <150.000000>;
	turn under3 to z-axis <-80> speed <150.000000>;
	wait-for-turn under1 around x-axis;
	sleep 1;
	hide under1;
	hide under2;
	hide under3;
	}
	sleep 2;
	return (0);
}

deactivatescr()
{
	if( TRUE )
	{
	bmoving = 0;
	turn under1 to x-axis <120> now;
	turn under2 to z-axis <80> now;
	turn under3 to z-axis <-80> now;
	sleep 1;
	show under1;
	show under2;
	show under3;
	turn under1 to x-axis <0> speed <150.000000>;
	turn under2 to z-axis <0> speed <150.000000>;
	turn under3 to z-axis <0> speed <150.000000>;
	wait-for-turn under1 around x-axis;
	}
	sleep 66;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Toggle(t,value) 
{

if(t==1)
	{
if(value==0)
{
sleep 2000;
aimer = 1;
}

if(value==1)
{
sleep 2000;
aimer = 2;
}
	}

}
	
ProcessFlames()
	{
	// Process the flames SFX while moving;

	while (TRUE)
		{
		speed = get CURRENT_SPEED;
		if (bmoving == 1 AND speed > 99)
			{
			emit-sfx 1024 + 0 from thrust1;
			emit-sfx 1024 + 0 from thrust2;
			}
	// NO GOD DAMN WAY TO CHECK SPEED OR HEADING! GOOD TO GO		
	//	if (bmoving == 1 AND fast > 0)
	//		{
	//		emit-sfx 1024 + 1 from wingtip1;
	//		emit-sfx 1024 + 1 from wingtip2;
	//		}
		sleep 50;
		}
	}

Create()
{
	aimer = 1;
	gun_1 = m1;
	gun2 = m1;
	fast = 0;
	hide wingtip1;
	hide wingtip2;
	hide thrust1;
	hide thrust2;
	hide m1;
	hide m2;
	call-script InitState();
	start-script SmokeUnit();
	start-script ProcessFlames();	
}

Activate()
{
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	return (0);
}

StartMoving()
	{
	start-script ProcessFlames();
	sleep 2000;
	bmoving = 1;
	}
	
StopMoving()
	{
	sleep 200; //stop false alarms
	bmoving = 0;
	}

	
AimWeapon1(Func_Var_1, Func_Var_2)
{
	if (aimer == 1)
	{
	return (1);
	}
}

FireWeapon1()
{
	gun_1 = !gun_1;
}

AimWeapon2(Func_Var_1, Func_Var_2)
{
	if (aimer == 2)
	{
	return (1);
	}
}

FireWeapon2()
{
	gun2 = !gun2;
}

QueryWeapon1(Func_Var_1)
{
	if( gun_1 )
	{
		Func_Var_1 = m1;
	}
	else
	{
		Func_Var_1 = m2;
	}
	return (0);
}

QueryWeapon2(Func_Var_1)
{
	if( gun2 )
	{
		Func_Var_1 = m1;
	}
	else
	{
		Func_Var_1 = m2;
	}
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}


Killed(severity, corpsetype)
{

	if( severity <= 99 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode fin1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode fin2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode under1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode wing1 type SHATTER | BITMAP5;
		explode tail1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wing2 type BITMAPONLY | BITMAP2;
		explode tail2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 1;
	explode base type BITMAPONLY | BITMAP1;
	explode fin1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode fin2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode under1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode wing1 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode tail1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wing2 type BITMAPONLY | BITMAP2;
	explode tail2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	return (0);
}
