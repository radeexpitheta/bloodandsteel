#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, m1, m2, tracks, turret, tubes;
static-var  aimer, restore_delay, regspeed, gun1, miz, ready, aoro;


#ifndef MAX_SPEED
#define MAX_SPEED 75 
#endif

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM2			4

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

undeploy()
{
	aimer = 0;
	sleep 3000;	
	aimer = 1;
	set MAX_SPEED to regspeed;
}

deploy()
{
	aimer = 0;
	set MAX_SPEED to 1;
	sleep 3000;
	aimer = 2;
}

Toggle(t,value) 
{

if(t==1)
	{
if(value==0)
{
call-script undeploy();
}

if(value==1)
{
call-script deploy();	
}
	}

}

Create()
{
	regspeed = get MAX_SPEED;
	aimer = 1;
	miz = 4;
	ready = 1;
	aoro = 1;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;	
	turn turret to y-axis <0> speed <100.071429>;
	turn tubes to x-axis <0> speed <100.071429>;
}

reload()
{
	if (aoro == 1)
	{
sleep 8000; //dont cheat
ready = 1;
	}
	if (aoro == 2)
	{
sleep 24000; //dont cheat
ready = 1;
miz = 4;
	}
}

AimPrimary(heading, pitch)
{
	if ( aimer == 1)
	{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	start-script restoreafterdelay();
	turn turret to y-axis heading speed <500.071429>;
	turn tubes to x-axis 0 - pitch speed <300.071429>;
	wait-for-turn turret around y-axis;
	if (ready == 0)
		{
	start-script reload();
		}
	if (ready == 1)
		{
	return (1);
		}
	}
}


FirePrimary()
{
gun1 = 1 - gun1;
ready = 0;
aoro = 1;
start-script reload();
//emit-sfx 1024+0 from fp1;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
if (gun1 == 1)
	{
	piecenum = m1;
	}
if (gun1 == 0)
	{
	piecenum = m2;
	}
}

//--------------

AimSecondary(heading, pitch)
{
	if ( aimer == 2 )
	{
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;
	set MAX_SPEED to 1;
	start-script restoreafterdelay();
	turn turret to y-axis heading speed <200.071429>;
	turn tubes to x-axis 0 - pitch speed <100.071429>;
	wait-for-turn turret around y-axis;
	if (ready == 0)
	{
	start-script reload();
	}
	if (ready == 1)
		{
	return (1);
		}
	}
}

Shot2()
{
	if (aimer == 2)
	{
	gun1 = 1 - gun1;
	//emit-sfx 1024+0 from fp1;
	}
	miz = miz - 1;
	if (miz < 1)
	{
	ready = 0;
	aoro = 2;
	start-script reload();
	}
}

AimFromSecondary(piecenum)
{
	piecenum = turret;
}

QuerySecondary(piecenum)
{
if (gun1 == 1)
	{
	piecenum = m1;
	}
if (gun1 == 0)
	{
	piecenum = m2;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode tracks type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode tubes type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode tracks type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode tubes type FALL | BITMAP3;
		explode turret type FALL | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode tracks type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode tubes type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode tracks type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode tubes type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
}
